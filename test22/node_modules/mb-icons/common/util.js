'use strict'

import fs from 'fs'
import request from 'request'
import csv from 'csvtojson'

export const joinList = list => list && Array.isArray(list) && list.join()

export function readFile(fileName) {
  return new Promise((resolve, reject) => (
    fs.readFile(
      fileName,
      'utf8',
      (err, data) => err ? reject(err) : resolve(data),
    )
  ))
}

export function writeFile(fileName, data) {
  return new Promise((resolve, reject) => (
    fs.writeFile(
      fileName,
      data,
      err => err ? reject(err) : resolve(data),
    )
  ))
}

/**
 * Fetch and return data from certain URI or read from fallback file
 * in case of error.
 *
 * @param
 *  @prop {String} uri
 *  @prop {String} fallbackFilePath
 * @return {Promise} resolve to fetched data
 */
export function fetch({ uri, fallbackFilePath }) {
  return (
    new Promise((resolve, reject) => (
      request(
        {
          uri,
          method: 'GET',
          encoding: 'utf8',
          timeout: 2000,
        },
        (err, res) => err ? reject(err) : resolve(res.body)
      )
    ))
    .catch(err => (
      fallbackFilePath
      ? (
        console.error('Error fetching data from the URI, using fallback file insteadâ€¦')
        ||
        readFile(fallbackFilePath)
      )
      : console.error('Error fetching data from the URI.')
    ))
  )
}

export function mergeIconKeywords(iconList, keywordList) {
  const mergedIconList = (
    Object.values(keywordList)
    .reduce((result, cat) => result.concat(cat), [])
    .map(keywords => keywords.split(','))
    .map(([id, ...al]) => ([
      iconList.find(it => id === it.id || new RegExp(`\\b${id}\\b`).test(it.aliases)),
      ...al,
    ]))
    .filter(([icon, ...al]) => !!icon)
    .map(([icon, ...al]) => (
      al.length > 0
      && Object.assign(icon, {
        keywords: icon.keywords ? `${icon.keywords},${joinList(al)}` : joinList(al)
      })
    ))
  )

  console.log(`Merged ${mergedIconList.length} icon keyword(s).`)
  return iconList
}

export function parseFromCSV(file) {
  return new Promise(resolve => (
    csv()
    .fromFile(file)
    .on('end_parsed', resolve)
  ))
}
