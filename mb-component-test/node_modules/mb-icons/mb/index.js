'use strict'

import { readdir, readFile, writeFile } from 'fs'
import cheerio from 'cheerio'

import iconList from './icon-list.json'

const SELECTOR_G = 'g'
const SELECTOR_SHAPES = 'g, path, ellipse, image, line, polygon, polyline, rect'

const HASH = Math.random().toString(36).substr(2, 5)

const iconData = iconList.reduce(
  (result, icon) => (
    icon.cat.split(',').map(cat => result[cat].push(icon))
    && result
  ),

  // Initial result:
  {
    'Widgets': [],
    'Tool': [],
    'Editor': [],
    'Arrow': [],
    'Mobile': [],
    'Logo': [],
    'Miscellaneous': [],
    'Mobile': [],
    'App': [],
  },
)

/**
 * Get SVG sprite XML.
 *
 * @param {String} symbolXML
 * @return {String} XML of the merged SVG sprite
 */
const getSVGXML = symbolXML => (`
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<defs>${symbolXML}</defs>
</svg>
`.trimLeft()
)

/**
 * Get symbol XML according to given info.
 *
 * @param {Object} option
 *  @prop {String} id
 *  @prop {String} viewbox
 *  @prop {String} transform
 *  @prop {String} path XML
 */
const getSymbolXML = ({id, viewbox, transform, path}) => (`
<symbol id="${id}" viewBox="${viewbox}">
${
  transform ? `<g transform="${transform}">${path}</g>` : path
}
</symbol>
`)

/**
 * Find path XML of the given SVG elmt.
 *
 * @param {Cheerio} $svg
 * @return {Cheerio} XML of the found path element
 */
const findPathXML = $svg => (
  $svg
    .find(SELECTOR_SHAPES)
    .removeAttr('fill')
    .removeAttr('fill-rule')
  && (
    $svg.children(SELECTOR_G).eq(0).html()
    || cheerio.html($svg.find(SELECTOR_SHAPES).eq(0))
  )
)

const getDemoHTML = iconUL => (`
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Icons for MockingBot</title>

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="./css/demo.css">
  <link rel="stylesheet" href="./css/icon.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/hint.css/2.5.0/hint.base.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/1.6.0/clipboard.min.js"></script>
</head>

<body>
<h1>MockingBot</h1>
${iconUL.join('')}
<script>
  document.addEventListener('DOMContentLoaded', function (e) {
    new Clipboard('.icon-list li span')
  })
</script>
</body>
<html>
`.trimLeft()
)

const getUL = (title, list) => `
<section id="${title}">
<h2>${title}</h2>
<ul class="icon-list">${list.join('')}</ul>
</section>
`

const getLI = ({ id, hidden = false }) => `
  <li class="${hidden ? 'will-be-hidden' : ''}">
    <svg class="icon"><use xlink:href="./mb/sprite.svg?${HASH}#${id}"></use></svg>
    <span class="hint--top" data-clipboard-text="${id}" aria-label="click to copy">${id}</span>
  </li>
`

/**
 * Create SVG sprite file.
 *
 * @param {String} xml
 * @return {Promise} resolve to the given XML.
 */
function createSVGSprite(xml) {
  return (
    new Promise((resolve, reject) => (
      writeFile('./mb/sprite.svg', xml, err => err ? reject(err) : resolve(xml))
    ))
  )
}

/**
 * Create demo page according to given list of filenames.
 *
 * @return {Promise} resolve if file created successfully
 */
function createDemoPage() {
  return (
    new Promise((resolve, reject) => (
      writeFile(
        './mockingbot.html',
        getDemoHTML(
          Object.entries(iconData)
          .map(([cat, iconList]) => (
            getUL(cat, iconList.map(({ id, hidden }) => getLI({ id, hidden })))
          ))
        ),
        err => err ? reject(err) : resolve()
      )
    ))
  )
}

/**
 * Compile SVG to symbol XML.
 *
 * @param {String} filename in `./svg` directory.
 * @return {Promise} resolve to SVG symbol XML.
 */
function compileSVG(filename) {
  return (
    new Promise((resolve, reject) => (
      readFile(`./mb/svg/${filename}`, 'utf8', (err, data) => err ? reject(err) : resolve(data))
    ))
    .then(svg => cheerio.load(svg).root().find('svg'))
    .then($svg => (
      getSymbolXML({
        id: $svg.find('title').text(),
        viewbox: $svg.attr('viewbox'),
        transform: $svg.children('g').attr('transform'),
        path: findPathXML($svg),
      })
    ))
  )
}

/**
 * Merge all SVG files in `./mb/svg/` directory.
 *
 * @return {Promise} resolve to sprite XML.
 */
function mergeSVGs() {
  return (
    new Promise((resolve, reject) => (
      readdir('./mb/svg', (err, fileNameList) => err ? reject(err) : resolve(fileNameList))
    ))
    .then(fileNameList => fileNameList.filter(fileName => /\.svg$/gi.test(fileName)))
    .then(fileNameList => Promise.all(fileNameList.map(compileSVG)))
    .then(symbolList => getSVGXML(symbolList.join('')))
    .then(createSVGSprite)
    .then(createDemoPage)
    //.then(console.log)
    .catch(console.error)
  )
}

console.time('Compiling total time')
mergeSVGs().then(() => console.timeEnd('Compiling total time'))
