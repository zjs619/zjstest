'use strict'

import csv from 'csvtojson'
import jsonFormat from 'json-format'
import jsonminify from 'jsonminify'
import { writeFile, parseFromCSV } from '../common/util'

// Constants:
const T_COMPILE = 'Total compiling time'

const getDemoHTML = iconUL => (`
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Icons for MockingBot</title>

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="./css/demo.css">
  <link rel="stylesheet" href="./css/icon.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/hint.css/2.5.0/hint.base.min.css">
  <script defer src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/1.6.0/clipboard.min.js"></script>

  <script>
document.addEventListener('DOMContentLoaded', function() {
  new Clipboard('.icon-list li span')
})
  </script>
</head>

<body>
<h1>Dora</h1>
${iconUL.join('')}
</body>
<html>
`.trimLeft()
)

const getUL = ({ list, title }) => `
<section>
${ title ? ('<h2>' + title + '</h2>') : '' }
<ul class="icon-list">${list.join('')}</ul>
</section>
`

const getLI = ({ id }) => `
  <li>
    <span class="icon dora">${id}</span>
    <span class="hint--top" data-clipboard-text="${id}" aria-label="click to copy">${id}</span>
  </li>
`

const getDuoLI = ({ id, layer }) => `
  <li>
    <span class="duo-icon duodora">
      ${ getLayer({ id, layer }) }
    </span>
    <span class="hint--top" data-clipboard-text="${id}" aria-label="click to copy">${id}</span>
  </li>
`

const getLayer = ({ id, layer }) => layer.map(l => `<span class="layer">${id + '__' + l}</span>`).join('')

const cleanIconData = icon => (
  icon.hidden === 'true'
    ? Object.assign(icon, { hidden: true })
    : delete icon.hidden && icon
)

const cleanLayerData = icon => (
  icon.layer
  && Object.assign(icon, { layer: eval(icon.layer) })
)

const format = (data, mapFn) => jsonFormat(
  data.map(mapFn),
  { type: 'space', size: 2 },
)

console.time(T_COMPILE)

void (async () => {
  const iconData = parseFromCSV('./dora/icon-list.csv')
  const duoData = parseFromCSV('./dora/duo-list.csv')

  const icon = format(await iconData, cleanIconData)
  const duo = format(await duoData, cleanLayerData)

  // JSON:
  writeFile('./dora/icon-list.json', icon)
  writeFile('./dora/icon-list.min.json', jsonminify(icon))

  writeFile('./dora/duo-list.json', duo)
  writeFile('./dora/duo-list.min.json', jsonminify(duo))

  const iconListByCat = JSON.parse(icon).reduce(
    (result, icon) => (
      icon.cat.split(',').map(cat => result[cat].push(icon))
      && result
    ),

    // Initial result:
    {
      'General': [],
      'Toolbar': [],
      'Panel': [],
      'Alignment': [],
      'Editor': [],
      'Preview': [],
    },
  )

  // HTML demo:
  const iconHTML = (
    Object.entries(iconListByCat)
    .map(([cat, iconList]) => (
      getUL({ title: cat, list: iconList.map(getLI)  })
    ))
    .join('')
  )

  const duoHTML = getUL({
    title: 'DuoDora',
    list: JSON.parse(duo).map(getDuoLI),
  })

  const html = getDemoHTML([iconHTML, duoHTML])

  writeFile('./index.html', html)
  console.timeEnd(T_COMPILE)
})()
