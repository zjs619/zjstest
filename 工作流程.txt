工作流程
从拿到一个需求开始, 需要按照如下流程完成需求开发

确认本次需求改动都涉及到哪些代码仓库, 是否已经开通对应仓库的权限(前端/后端, ruby/golang/node等)
在各个代码仓库拉取最新的主分支代码, 根据 分支规范 创建一致的分支名称(如 cx/618, cx/fix-login 等)
在分支上进行功能开发, 按照 提交规范 进行 commit message 的书写, 并在需要的时候发布子项目的版本
在 imock 仓库的同名分支上, 对各子项目的版本进行集成, 并部署到 测试环境, 通知产品/测试/运营同事验收
注意:

代码被合并之前, 各仓库要定期拉取主分支代码, 功能分支要及时 rebase 主分支来保证功能足够新



=============================================================================================


Git工作流规范
前言
企业采用 github 进行代码托管，所有项目源码均存放于github上
企业采用Github Flow工作流进行代码管理
企业 github 地址 https://github.com/mockingbot
当需要指定仓库权限时，请联系github管理员（长熙）
Github Flow
根据需求，从 master 拉出新分支，不区分功能分支或补丁分支。
在本地分支完成功能开发后，提交代码，并及时推送至远程仓库。
当想合并分支时，可以发起一个 pull request（简称PR）。
当 review 或者讨论通过后，你的pull request被接受，代码会合并到目标分支。
一旦合并到 master 分支，及时部署到测试环境并通知测试工程师进行验收。
说明:

只有一个长期分支 master ,而且 master 分支上的代码，永远是可发布状态,一般 master 会设置 protected 分支保护，只有有权限的人才能推送代码到 master 分支。
本企业除 imock-rails 仓库以 edge 分支作为主分支，其他均以 master 分支作为主分支。
pull request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。
使用流程
根据项目需求从github上拉取代码仓库

git clone <仓库地址>
根据任务目标在 github 上新建目标分支，如：yj/ws，并拉取到本地，作为修改代码仓库

git fetch  #github上新建分支后执行，在本地获取仓库的变更记录，此处获取新建的分支记录
git checkout <分支名> #在本地建立分支，与origin上分支名保持一致
注意:

分支名请根据 Branch 规范进行合理命名，方便识别及管理
修改代码后，提交修改内容

git add <修改内容> #提交代码到暂存区
git commit  -m '[description]'  #添加commit描述
git push #将本地commit push到github上
注意：

commit 描述需按照commit规范进行添加
原则上每完成一个功能需要提交一个commit
push代码时，若遇到冲突，禁止强行push，需在本地解决冲突后再push（自己个人分支确认后除外）
Branch规范
使用规范
每当开始一个新的任务时，需要从目标仓库切一个branch出来，作为自己的工作空间
根据需求从目标branch切出自己的branch，一般是从master或edge 切出
分支命名需以英文命名，如无必要，禁止使用拼音
当描述需要多个单词，以中划线（-）进行连接，如 yj/update-mb-rich-text
命名规范
分支项目命名规范

格式：<姓名简称>/<项目名称或简称>[-<目的>]

参考：yj/ws、yj/ws-rebase

主项目命名规范

格式：<姓名简称>/<功能目的>

参考：yj/theme、yj/update-mb-rich-text

生产/开发分支命名规范

格式：（prod|dev）/<项目名称>

参考：prod/ws、dev/ws

特殊分支命名规范

主分支：master

内测环境：edge



================================================================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

commit规范
前言
公司采用 rebase 机制来进行 commit 管理，这样保证了一个干净的线性 commit 历史，且没有不必要的 merge commit，使得 code review 更加容易;
在每次发起 Pull Request 前，都要保证当前分支已经 rebase 过最新的代码，并解决了代码冲突；
编写规范
commit文本规范

格式：: description

注意：英文冒号, 后跟一个空格

type类型：

CHORE: 构建工具相关变更 (example scopes: webpack, npm)
CI: CI 配置或脚本相关配置 (example scopes: github, gitlab, SauceLabs)
DOCS: 文档相关变动
FEAT: 新功能
FIX: bug修复
PERF: 提高性能相关
REFACTOR: 重构,既不修复 Bug 也不添加特性的代码更改
TEST: 测试相关
REVERT: 还原
description 推荐为中文，必要关键字或表达需要情况下使用英文

commit提交规范

原则上是处理一个 issue，提交一个 commit，若同时处理了多个问题，需要将 commit 拆成多个来提交，保证 commit 的原子性

publish规范
操作
目前的打包更新版本号发布流程采取自动化的形式，在各自的分支按需执行脚本即可打出相应的版本

当需要发布测试所用的包时，执行以下命令:

npm run RCVBTP
脚本会自动将当前的分支名附加到当前的版本号后面，打出相应的版本并通知CI自动执行打包和发布的操作


+============================================================================================================

测试环境
在墨刀, 每名研发都有一台专属的测试环境, 用于功能提测以及日常折腾, 配置域名为: *.dev.modao.cc(*为姓名短拼, 如 cx.dev.modao.cc)

准备环境
将公钥发给长熙/长宝, 用于在 aws 宁夏创建一个空的 debian 实例并配置 ssh 权限, 拿到两个 ssh 配置和个人测试服的内/外网 ip, ssh 配置需添加到本地的 ~/.ssh/config 中

服务器配置
debian 系统搭建 debian 权限配置 debian 应用部署

本地新增部署脚本
在 imock 仓库的 DEV_SERVER_SUBDOMAIN_MAP: .script/config/generateDeployHost.config.js:295 中增加自己名字的配置(使用 Dockerd 和 mb), 以cx(长熙)为例
执行 npm install 在本地生成部署和 nginx 配置, nginx 配置需更新到 2 中网关服务器上的 /etc/nginx/conf.d/dev-server-nginx.conf, 并执行 nginx -s reload
本地在 imock 仓库执行 npm run deploy cx2 --list 生成部署配置
(待补充部署相关文档...)


